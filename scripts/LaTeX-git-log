#!/usr/bin/perl
use strict;
use warnings;
use autodie;
use feature qw(say);
use IPC::System::Simple qw(capturex);
use Getopt::Long;

my $print_author = 0;
my $commit_count = 1;
GetOptions ('startcommit=s' => \$commit_count,
            'author' => \$print_author,
    );
## Tags auslesen und benutzen
say '\begin{tabular}{lp{12cm}}
%	\lable{tabular:Legende:git-log}
	\textbf{Abkürzung} & \textbf{Bedeutung} \\\\\\
	V & \texttt{Version} \\\\
	Tag & \texttt{Markierung} einer Menge von Dateien,
		aus denen sich zu einem beliebigen Zeitpunkt eine bestimmte Version wiederherstellen lässt \\\\
	Fm & Wie viele \texttt{Dateien} innerhalb dieser Version \texttt{verändert} wurden \\\\
	La & Wie viele \texttt{Zeilen} innerhalb dieser Version neu \texttt{hinzugekommen} sind \\\\
	Ld & Wie viele \texttt{Zeilen} innerhalb dieser Version \texttt{gelöscht} wurden \\\\
\end{tabular}

\bigskip
\newcounter{gitversionnumber}
\newcommand{\StepPrintgitV}{\stepcounter{gitversionnumber}\arabic{gitversionnumber}}

\iflanguage{ngerman}{\shorthandoff{"}}{}
\resetplusplus
\renewcommand{\longtableheader}{\hline \multicolumn{1}{|c}{\textbf{V}} & \multicolumn{1}{c}{\textbf{Tag}}';
say '& \multicolumn{1}{c}{\textbf{Autor}}' if $print_author;
say '& \multicolumn{1}{c}{\textbf{Datum}}
& \multicolumn{1}{c}{\textbf{Versionsbericht}} & \multicolumn{1}{c}{\textbf{Fm}}
& \multicolumn{1}{c}{\textbf{La}} & \multicolumn{1}{c|}{\textbf{Ld}} \\\\ \hline}';
if ($print_author) {
    say '\begin{longtable}{|rllllrrr|}';
} else {
    say '\begin{longtable}{|rlllrrr|}';
}
say '\longtableheader
\endfirsthead

\longtableheader
\endhead
';
if ($print_author) {
    say '\hline \multicolumn{8}{|r|}{\longtableendfoot} \\\\ \hline';
} else {
    say '\hline \multicolumn{7}{|r|}{\longtableendfoot} \\\\ \hline';
}
say '\endfoot

\hline% \hline
\endlastfoot
';
## git log --pretty=format:'%ai'
## git log --date=short --pretty=format:'%ad'
## for privacy
my @lines;
my @git_command = qw(git log --date=short --shortstat);
if ($print_author) {
   @lines = reverse capturex(@git_command,
       q(--pretty=format:%d & %an & %ad & %s));
} else {
   @lines = reverse capturex(@git_command,
       q(--pretty=format:%d & %ad & %s));
}
my $which_line = 0;
my @changes;
for (@lines) {
    next if /\A\Z/xms;
    chomp;
    if ($which_line) {
        s/\((?:HEAD, |)(.*?)(?:, master|)\)/$1/;
        s/ master//;
        say "\\hline $commit_count &$_ & " . join(' & ', @changes) . ' \\\\';
        $commit_count++;
    } else {
        @changes = (0, 0, 0);
        /(\d+) files? changed/ and $changes[0] = $1;
        /(\d+) insertions?/ and $changes[1] = $1;
        /(\d+) deletions?/ and $changes[2] = $1;
    }
    $which_line ^= 1; ## toggle bit
}
say '\end{longtable}'
